// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contract.sql

package database

import (
	"context"
	"time"
)

const registerContract = `-- name: RegisterContract :one
INSERT INTO contracts (
  id,
  faction_symbol,
  type,
  accepted,
  fulfilled,
  deadline_to_accept,
  agent_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING cid
`

type RegisterContractParams struct {
	ID               string
	FactionSymbol    string
	Type             string
	Accepted         bool
	Fulfilled        bool
	DeadlineToAccept time.Time
	AgentID          int32
}

func (q *Queries) RegisterContract(ctx context.Context, arg RegisterContractParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerContract,
		arg.ID,
		arg.FactionSymbol,
		arg.Type,
		arg.Accepted,
		arg.Fulfilled,
		arg.DeadlineToAccept,
		arg.AgentID,
	)
	var cid int32
	err := row.Scan(&cid)
	return cid, err
}

const registerDeliver = `-- name: RegisterDeliver :exec

INSERT INTO delivers (
  trade_symbol,
  destination_symbol,
  units_required,
  units_fulfilled,
  term_id
)
VALUES ($1, $2, $3, $4, $5)
`

type RegisterDeliverParams struct {
	TradeSymbol       string
	DestinationSymbol string
	UnitsRequired     int32
	UnitsFulfilled    int32
	TermID            int32
}

func (q *Queries) RegisterDeliver(ctx context.Context, arg RegisterDeliverParams) error {
	_, err := q.db.ExecContext(ctx, registerDeliver,
		arg.TradeSymbol,
		arg.DestinationSymbol,
		arg.UnitsRequired,
		arg.UnitsFulfilled,
		arg.TermID,
	)
	return err
}

const registerPayment = `-- name: RegisterPayment :exec

INSERT INTO payments (on_accepted, on_fulfilled, term_id)
VALUES ($1, $2, $3)
`

type RegisterPaymentParams struct {
	OnAccepted  int32
	OnFulfilled int32
	TermID      int32
}

func (q *Queries) RegisterPayment(ctx context.Context, arg RegisterPaymentParams) error {
	_, err := q.db.ExecContext(ctx, registerPayment, arg.OnAccepted, arg.OnFulfilled, arg.TermID)
	return err
}

const registerTerms = `-- name: RegisterTerms :one

INSERT INTO terms (deadline, contract_id)
VALUES ($1, $2)
RETURNING id
`

type RegisterTermsParams struct {
	Deadline   time.Time
	ContractID int32
}

func (q *Queries) RegisterTerms(ctx context.Context, arg RegisterTermsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerTerms, arg.Deadline, arg.ContractID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
