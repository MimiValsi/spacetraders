// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ship.sql

package database

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const registerCargo = `-- name: RegisterCargo :one

INSERT INTO cargos (capacity, units, ship_id)
VALUES ($1, $2, $3)
RETURNING id
`

type RegisterCargoParams struct {
	Capacity int32
	Units    int32
	ShipID   int32
}

func (q *Queries) RegisterCargo(ctx context.Context, arg RegisterCargoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerCargo, arg.Capacity, arg.Units, arg.ShipID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const registerConsumed = `-- name: RegisterConsumed :exec

INSERT INTO consumed (amount, timestmp, fuel_id)
VALUES ($1, $2, $3)
`

type RegisterConsumedParams struct {
	Amount   int32
	Timestmp time.Time
	FuelID   int32
}

func (q *Queries) RegisterConsumed(ctx context.Context, arg RegisterConsumedParams) error {
	_, err := q.db.ExecContext(ctx, registerConsumed, arg.Amount, arg.Timestmp, arg.FuelID)
	return err
}

const registerCooldown = `-- name: RegisterCooldown :exec

INSERT INTO cooldowns (
  ship_symbol,
  total_seconds,
  remaining_seconds,
  expiration,
  ship_id
)
VALUES ($1, $2, $3, $4, $5)
`

type RegisterCooldownParams struct {
	ShipSymbol       string
	TotalSeconds     int32
	RemainingSeconds int32
	Expiration       time.Time
	ShipID           int32
}

func (q *Queries) RegisterCooldown(ctx context.Context, arg RegisterCooldownParams) error {
	_, err := q.db.ExecContext(ctx, registerCooldown,
		arg.ShipSymbol,
		arg.TotalSeconds,
		arg.RemainingSeconds,
		arg.Expiration,
		arg.ShipID,
	)
	return err
}

const registerCrew = `-- name: RegisterCrew :exec

INSERT INTO crews (
  current,
  required,
  capacity,
  rotation,
  morale,
  wages,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type RegisterCrewParams struct {
	Current  int32
	Required int32
	Capacity int32
	Rotation string
	Morale   int32
	Wages    int32
	ShipID   int32
}

func (q *Queries) RegisterCrew(ctx context.Context, arg RegisterCrewParams) error {
	_, err := q.db.ExecContext(ctx, registerCrew,
		arg.Current,
		arg.Required,
		arg.Capacity,
		arg.Rotation,
		arg.Morale,
		arg.Wages,
		arg.ShipID,
	)
	return err
}

const registerDestination = `-- name: RegisterDestination :exec

INSERT INTO destinations (
  symbol,
  type,
  system_symbol,
  x,
  y,
  route_id
)
VALUES ($1, $2, $3, $4, $5, $6)
`

type RegisterDestinationParams struct {
	Symbol       string
	Type         string
	SystemSymbol string
	X            int32
	Y            int32
	RouteID      int32
}

func (q *Queries) RegisterDestination(ctx context.Context, arg RegisterDestinationParams) error {
	_, err := q.db.ExecContext(ctx, registerDestination,
		arg.Symbol,
		arg.Type,
		arg.SystemSymbol,
		arg.X,
		arg.Y,
		arg.RouteID,
	)
	return err
}

const registerEngine = `-- name: RegisterEngine :exec

INSERT INTO engines (
  symbol,
  name,
  condition,
  integrity,
  description,
  speed,
  quality,
  requirement_id,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type RegisterEngineParams struct {
	Symbol        string
	Name          string
	Condition     float32
	Integrity     float32
	Description   string
	Speed         int32
	Quality       int32
	RequirementID int32
	ShipID        int32
}

func (q *Queries) RegisterEngine(ctx context.Context, arg RegisterEngineParams) error {
	_, err := q.db.ExecContext(ctx, registerEngine,
		arg.Symbol,
		arg.Name,
		arg.Condition,
		arg.Integrity,
		arg.Description,
		arg.Speed,
		arg.Quality,
		arg.RequirementID,
		arg.ShipID,
	)
	return err
}

const registerFrame = `-- name: RegisterFrame :exec

INSERT INTO frames (
  symbol,
  name,
  condition,
  integrity,
  description,
  module_slots,
  mounting_points,
  fuel_capacity,
  quality,
  requirement_id,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id
`

type RegisterFrameParams struct {
	Symbol         string
	Name           string
	Condition      float32
	Integrity      float32
	Description    string
	ModuleSlots    int32
	MountingPoints int32
	FuelCapacity   int32
	Quality        int32
	RequirementID  int32
	ShipID         int32
}

func (q *Queries) RegisterFrame(ctx context.Context, arg RegisterFrameParams) error {
	_, err := q.db.ExecContext(ctx, registerFrame,
		arg.Symbol,
		arg.Name,
		arg.Condition,
		arg.Integrity,
		arg.Description,
		arg.ModuleSlots,
		arg.MountingPoints,
		arg.FuelCapacity,
		arg.Quality,
		arg.RequirementID,
		arg.ShipID,
	)
	return err
}

const registerFuels = `-- name: RegisterFuels :one

INSERT INTO fuels (current, capacity, ship_id)
VALUES ($1, $2, $3)
RETURNING id
`

type RegisterFuelsParams struct {
	Current  int32
	Capacity int32
	ShipID   int32
}

func (q *Queries) RegisterFuels(ctx context.Context, arg RegisterFuelsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerFuels, arg.Current, arg.Capacity, arg.ShipID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const registerInventories = `-- name: RegisterInventories :exec

INSERT INTO inventories (
  symbol,
  name,
  description,
  units,
  cargo_id
)
VALUES ($1, $2, $3, $4, $5)
`

type RegisterInventoriesParams struct {
	Symbol      string
	Name        string
	Description string
	Units       int32
	CargoID     int32
}

func (q *Queries) RegisterInventories(ctx context.Context, arg RegisterInventoriesParams) error {
	_, err := q.db.ExecContext(ctx, registerInventories,
		arg.Symbol,
		arg.Name,
		arg.Description,
		arg.Units,
		arg.CargoID,
	)
	return err
}

const registerModule = `-- name: RegisterModule :exec

INSERT INTO modules (
  symbol,
  name,
  description,
  capacity,
  range,
  requirement_id,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type RegisterModuleParams struct {
	Symbol        string
	Name          string
	Description   string
	Capacity      int32
	Range         int32
	RequirementID int32
	ShipID        int32
}

func (q *Queries) RegisterModule(ctx context.Context, arg RegisterModuleParams) error {
	_, err := q.db.ExecContext(ctx, registerModule,
		arg.Symbol,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Range,
		arg.RequirementID,
		arg.ShipID,
	)
	return err
}

const registerMount = `-- name: RegisterMount :exec

INSERT INTO mounts (
  symbol,
  name,
  description,
  strength,
  deposits,
  requirement_id,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type RegisterMountParams struct {
	Symbol        string
	Name          string
	Description   string
	Strength      int32
	Deposits      []string
	RequirementID int32
	ShipID        int32
}

func (q *Queries) RegisterMount(ctx context.Context, arg RegisterMountParams) error {
	_, err := q.db.ExecContext(ctx, registerMount,
		arg.Symbol,
		arg.Name,
		arg.Description,
		arg.Strength,
		pq.Array(arg.Deposits),
		arg.RequirementID,
		arg.ShipID,
	)
	return err
}

const registerNav = `-- name: RegisterNav :one

INSERT INTO navs (
  system_symbol,
  waypoint_symbol,
  status,
  flight_mode,
  ship_id
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type RegisterNavParams struct {
	SystemSymbol   string
	WaypointSymbol string
	Status         string
	FlightMode     string
	ShipID         int32
}

func (q *Queries) RegisterNav(ctx context.Context, arg RegisterNavParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerNav,
		arg.SystemSymbol,
		arg.WaypointSymbol,
		arg.Status,
		arg.FlightMode,
		arg.ShipID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const registerOrigin = `-- name: RegisterOrigin :exec

INSERT INTO origins (
  symbol,
  type,
  system_symbol,
  x,
  y,
  route_id
)
VALUES ($1, $2, $3, $4, $5, $6)
`

type RegisterOriginParams struct {
	Symbol       string
	Type         string
	SystemSymbol string
	X            int32
	Y            int32
	RouteID      int32
}

func (q *Queries) RegisterOrigin(ctx context.Context, arg RegisterOriginParams) error {
	_, err := q.db.ExecContext(ctx, registerOrigin,
		arg.Symbol,
		arg.Type,
		arg.SystemSymbol,
		arg.X,
		arg.Y,
		arg.RouteID,
	)
	return err
}

const registerReactor = `-- name: RegisterReactor :exec

INSERT INTO reactors (
  symbol,
  name,
  condition,
  integrity,
  description,
  power_output,
  quality,
  requirement_id,
  ship_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type RegisterReactorParams struct {
	Symbol        string
	Name          string
	Condition     float32
	Integrity     float32
	Description   string
	PowerOutput   int32
	Quality       int32
	RequirementID int32
	ShipID        int32
}

func (q *Queries) RegisterReactor(ctx context.Context, arg RegisterReactorParams) error {
	_, err := q.db.ExecContext(ctx, registerReactor,
		arg.Symbol,
		arg.Name,
		arg.Condition,
		arg.Integrity,
		arg.Description,
		arg.PowerOutput,
		arg.Quality,
		arg.RequirementID,
		arg.ShipID,
	)
	return err
}

const registerRegistration = `-- name: RegisterRegistration :exec

INSERT INTO registrations (
  name,
  faction_symbol,
  role,
  ship_id
)
VALUES ($1, $2, $3, $4)
`

type RegisterRegistrationParams struct {
	Name          string
	FactionSymbol string
	Role          string
	ShipID        int32
}

func (q *Queries) RegisterRegistration(ctx context.Context, arg RegisterRegistrationParams) error {
	_, err := q.db.ExecContext(ctx, registerRegistration,
		arg.Name,
		arg.FactionSymbol,
		arg.Role,
		arg.ShipID,
	)
	return err
}

const registerRequirements = `-- name: RegisterRequirements :one

INSERT INTO requirements (
  power,
  crew,
  slots
)
VALUES ($1, $2, $3)
RETURNING id
`

type RegisterRequirementsParams struct {
	Power int32
	Crew  int32
	Slots int32
}

func (q *Queries) RegisterRequirements(ctx context.Context, arg RegisterRequirementsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerRequirements, arg.Power, arg.Crew, arg.Slots)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const registerRoute = `-- name: RegisterRoute :one

INSERT INTO routes (departure_time, arrival, nav_id)
VALUES ($1, $2, $3)
RETURNING id
`

type RegisterRouteParams struct {
	DepartureTime time.Time
	Arrival       time.Time
	NavID         int32
}

func (q *Queries) RegisterRoute(ctx context.Context, arg RegisterRouteParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerRoute, arg.DepartureTime, arg.Arrival, arg.NavID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const registerShip = `-- name: RegisterShip :one
INSERT INTO ships (symbol, agent_id)
VALUES ($1, $2)
RETURNING id
`

type RegisterShipParams struct {
	Symbol  string
	AgentID int32
}

func (q *Queries) RegisterShip(ctx context.Context, arg RegisterShipParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerShip, arg.Symbol, arg.AgentID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
